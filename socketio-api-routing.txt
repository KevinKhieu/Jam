Socket IO API and routing

pushes are from server to client. They push to all clients, including the client
that initiated the change.

/****** API ******/

// Send client's IP to client
send:your-ip (server -> client) {ip}

// Push song info to client
push:queue (server -> client(s)) {queue_songs}
send:last-played (server -> client) {song}

// Add Song
send:add-song (client -> server) {song}
push:add-song (server -> clients) {song}

// Upvote Song
send:upvote (client -> server) {sid}
push:upvote (server -> clients) {song}

// Downvote Song
send:downvote (client -> server) {sid}
push:downvote (server -> clients) {song}


/** Music control with host-client **/

// Now Playing (also includes lastPlayed)
send:now-playing (host-client -> server) {nowPlaying, lastPlayed}
push:now-playing (server -> non-host-client(s)) {nowPlaying, lastPlayed}

// Play
send:play (host-client -> server) {seekpos, timeResumed}
push:play (server -> clients) {seekpos, timeResumed}

// Pause
send:pause (host-client -> server) {seekpos}
push:pause (server -> clients) {seekpos}


/** Google Music Proxy API **/

// Search
get:search (client -> server) {query}
send:search (server -> client) {results}


/** Debugging **/
send:reset (client -> server) {}
	Clears all songs from queue. Server responds by broadcasting a push:queue that should be empty.
server-error (server -> client(s)) {}


/****** Routes ******/

on client connect:
	push now playing
	push queue
	push last played

on add song:
	add song to queue

on upvote:
	upvote song


// Song control //

on play:
	play
on pause:
	pause
on next song:
	send now playing
