goals

socketio
	DONE convert all existing communication to socketio
	DONE on Start button-click, randomly choose a song to play and start playing it
	DONE get upvotes working again
		DONE make upvotes only one per ip
		DONE on load page, toggle heart as liked for each song this ip has liked
	DONE choose one of songs with most upvotes to play each time
	DONE remove song from queue after choosing it
	DONE now-playing routing
		DONE Send sid, but push now-playing json.
		DONE The room host sets everything and plays music before sending the event,
			then the others set everything after it goes through the server.
	DONE play and pause routes
	DONE tidy up controller now-playing state architecture and now-playing schema
		DONE add playState to schema
	DONE Combine Begin Playback button with Play button
	streamline NowPlaying initialization with new NowPlaying(json) constructor


DONE then integrate with google play api
	DONE if time: pre-create structure so that all that needs to happen is the library be provided

DONE Record album url as part of backend nowPlaying so that clients get it on connect
DONE Remove IP tracking for likes
	refreshing the page should forget all your likes
DONE Send nowPlaying:none when queue runs out
DONE clear now playing when host connects
	or clear now playing when host disconnects?
DONE Synchronization (like radio)
	DONE all clients stream song
	DONE play and pause events work
	DONE song seek/starttime is synchronized
		DONE synchronize when client loads
		DONE make sure the client doesn't play if it loads while playback is paused
		DONE synchronize on send:play
DONE Whenever no song is playing, it should say No Current Song.
host play should also wait for server confirmation for better sync

Frontend stuff
	Seek bar
	song info on hover

Extras
	add album to song display, that will solve much of the problem of duplicates
	DONE host admin privileges
		remove songs, queue songs

Room Creation
	Manny
		localhost:3000 - generates random url and redirects you there
			then on receive socket ip, get url and tell server the url
		localhost:3000/random-url
			client view of that room
		localhost:3000/lsmtkkxa.html/random-url
			host view of that room
	Kevin
		home screen with buttons for room creation and joining a room
			room creation: form where you input the name
				sends to server asking if available
					server returns null if not available
					server returns new url if available
				redirects if receive new url
			join room: redirect to given room
	Lucas
		DONE database pluralization
			DONE create Room table
			DONE add roomId to Entry
			DONE add roomId to NowPlaying
		DONE server-side socket handlers for room events
		DONE join room on connect, send all io.emits to particular rooms
		DONE update socket events according to socketio-api-routing.txt
			DONE host key for room
		if you type invalid room into address bar, go to landing page
		if you type incorrect room password into address bar, go to landing page
		Option to log into room as host from landing page?
